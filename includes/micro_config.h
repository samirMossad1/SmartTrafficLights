
/*
 * 		Module: Microcontroller Configurations.
 *
 *		File Name: micro_config.h
 *
 * 	    Created on: July 16, 2019
 *
 *      Author: Samir Mossad Ibrahim
 */


#ifndef MICRO_CONFIG_H
#define MICRO_CONFIG_H


#include <avr/io.h>
#include <avr/interrupt.h>
//#include <util/delay.h>


/** Magical Numbers **/

#define GPIO_INT01_OFFSET			(0X06)
#define GPIO_INT1_OFFSET			(0X07)
#define GPIO_INT2_OFFSET			(0X05)
#define BIT_0						(0X0)
#define BIT_1						(0X1)
#define BIT_2						(0X2)
#define BIT_3						(0X3)
#define BIT_4						(0X4)
#define BIT_5						(0X5)
#define BIT_6						(0X6)
#define BIT_7						(0X7)
#define BIT_8						(0X8)




/**  GPIO REGISTERS  **/

#define GPIO_PORTA_DIRECTION_REGISTER		DDRA
#define GPIO_PORTA_OUTPUT_REGISTER			PORTA
#define GPIO_PORTA_INPUT_REGISTER			PINA

#define GPIO_PORTB_DIRECTION_REGISTER		DDRB
#define GPIO_PORTB_OUTPUT_REGISTER			PORTB
#define GPIO_PORTB_INPUT_REGISTER			PINB

#define GPIO_PORTC_DIRECTION_REGISTER		DDRC
#define GPIO_PORTC_OUTPUT_REGISTER			PORTC
#define GPIO_PORTC_INPUT_REGISTER			PINC

#define GPIO_PORTD_DIRECTION_REGISTER		DDRD
#define GPIO_PORTD_OUTPUT_REGISTER			PORTD
#define GPIO_PORTD_INPUT_REGISTER			PIND


#define GPIO_MODULE_INTERRUPT_CONTROL_REGISTER 	GICR
#define GPIO_INTERRUPT_SENSE_CONTROL_REGISTER 	MCUCR
#define GPIO_MASKED_INTERRUPT_FLAG_REGISTER 	GIFR

/*GPIO MASKS*/

#define GPIO_INT0_CLEAR_MASK 0X03
#define GPIO_INT1_CLEAR_MASK 0X06
#define GPIO_INT2_CLEAR_MASK 0X40

#define GPIO_TOGGLE_PORT_MASK	0XFF

/*GPIO REGISTER BITS*/

#define GPIO_INT1_EDGE_SELECT_SHIFT 0X02
#define GPIO_INT2_EDGE_SELECT_SHIFT 0X06

/** GPIO OFFSET NUMBERS **/

#define GPIO_INT0_OFFSET			(0X06)
#define GPIO_INT1_OFFSET			(0X07)
#define GPIO_INT2_OFFSET			(0X05)




/** WATCHDOG RESET TIMER REGISTERS **/

#define MCU_CONTROL_STATUS_REGISTER				MCUCSR
#define WATCHDOG_TIMER_CONTROL_REGISTER			WDTCR



/*TIMER REGISTERS*/

#define TIMER0_COUNT_REGISTER			TCNT0
#define TIMER0_COMPARE_REGISTER			OCR0
#define TIMER1_COUNT_REGISTER			TCNT1
#define TIMER2_COUNT_REGISTER			TCNT2
#define TIMER0_CONTROL_REGISTER			TCCR0
#define TIMER1A_CONTROL_REGISTER		TCCR1A
#define TIMER1B_CONTROL_REGISTER		TCCR1B
#define TIMER2_CONTROL_REGISTER			TCCR2
#define TIMER2_COMPARE_REGISTER			OCR2
#define TIMER1A_COMPARE_REGISTER		OCR1A
#define TIMER1B_COMPARE_REGISTER		OCR1B
#define TIMER1_INPUT_CAPTURE_REGISTER 	ICR1

#define TIMER_FLAG_REGISTER				TIFR
#define TIMER_INTERRUPT_MASK_REGISTER 	TIMSK

/*TIMER_BITS*/
#define TIMER0_OVERFLOW_INTERRUPT_ENABLE		0x00
#define TIMER0_COMPARE_INTERRUPT_ENABLE			0x01
#define TIMER1_OVERFLOW_INTERRUPT_ENABLE		0x02
#define TIMER1B_COMPARE_INTERRUPT_ENABLE		0x03
#define TIMER1A_COMPARE_INTERRUPT_ENABLE		0x04
#define TIMER1_INPUT_CAPTURE_INTERRUPT_ENABLE	0X05
#define TIMER2_OVERFLOW_INTERRUPT_ENABLE		0x06
#define TIMER2_COMPARE_INTERRUPT_ENABLE			0x07

#define TIMER0_FORCE_OUTPUT_COMPARE_ENABLE		BIT_7
#define TIMER0_COMPARE_MATCH_OUTPUT				BIT_4



/*TIMER_FLAGS*/
#define TIMER0_OVERFLOW_FLAG		0x00
#define TIMER0_COMPARE_FLAG			0x01
#define TIMER1_OVERFLOW_FLAG		0x02
#define TIMER1B_COMPARE_FLAG		0x03
#define TIMER1A_COMPARE_FLAG		0x04
#define TIMER1_INPUT_CAPTURE_FLAG	0X05
#define TIMER2_OVERFLOW_FLAG		0x06
#define TIMER2_COMPARE_FLAG			0x07

#define CLOCK_TIMER_DISABLE_MASK	0X07

/*TIMER MASKS*/
#define TIMER_0_PWM_NON_INVERTING_OC0_WITH_F_CPU_MASK		0X69
#define TIMER_0_PWM_NON_INVERTING_OC0_WITH_F_CPU_64_MASK	0X6B
#define TIMER_0_DISABLE_MASK								0X07
#define TIMER0_CLEAR_MASK									0X00
#define	_100_DUTY_CYCLE			(uint8_t) 255U
#define TIMER0_TOP_VALUE		(uint8_t) 255U


#define TIMER_1_CLEAR_MASK									0X0000
#define TIMER_1_DISABLE_MASK								0X07
#define TIMER_1_PWM_WITH_F_CPU_MASK							0X19
#define TIMER_1_PWM_NON_INVERTING_OC1A_MASK					0X80
#define TIMER_1_PWM_NON_INVERTING_OC1B_MASK					0X20
#define TIMER_1_FAST_PWM_MASK								0X02
#define TIMER_1_PWM_F_CPU_MASK								0X19
#define TIMER_1_PWM_F_CPU_64_MASK							0X1B

#define TIMER1_TOP_VALUE									0XFFFF



#define TIMER_2_PWM_NON_INVERTING_OC2_WITH_F_CPU_MASK		0X69
#define TIMER_2_DISABLE_MASK								0X07
#define TIMER2_CLEAR_MASK									0X00
#define TIMER2_TOP_VALUE									(uint8_t) 255U


#define CLOCK_TIMER_DISABLE_MASK	0X07
#define TIMER_ICU_EGE_CLEAR_MASK	0X40

#define TIMER_OVERFLOW_MODE_MASK						0X80
#define TIMER1_OVERFLOW_MODE_MASK_A						0X0C
#define TIMER1_OVERFLOW_MODE_MASK_B						0X00
#define TIMER_COMPARE_MODE_WITH_OC_TOGGLE_PIN_MASK		0X98
#define TIMER_COMPARE_MODE_WITH_OC_CLEAR_PIN_MASK		0XA8
#define TIMER_COMPARE_MODE_WITH_OC_SET_PIN_MASK			0XB8
#define TIMER_COMPARE_MODE_WITH_NORMAL_PIN_MASK			0X88
#define TIMER_PWM_MODE_NON_INVERTED_MASK				0X68
#define TIMER_PWM_MODE_INVERTED_MASK					0X78
#define TIMER1_CHAN_A_PWM_MODE_INVERTED_MASK_1			0XC3
#define TIMER1_CHAN_A_PWM_MODE_NON_INVERTED_MASK_1		0X83
#define TIMER1_CHAN_B_PWM_MODE_INVERTED_MASK_1			0X30
#define TIMER1_CHAN_B_PWM_MODE_NON_INVERTED_MASK_1      0X20
#define TIMER1_CHAN_B_PWM_MODE_MASK_2					0X18
#define TIMER1_CONTROL_REGISTER_B_CLEAR_MASK			0X00





/*ADC REGISTERS*/

#define ADC_CONTROL_STATUS_REGISTER		ADCSRA
#define ADC_MULTIPLEXER_SEL_REGISTER	ADMUX
#define ADC_DATA_LOW_REGISTER			ADCL
#define ADC_DATA_HIGH_REGISTER			ADCH
#define ADC_DATA_REGISTER				ADC
#define ADC_SPECIAL_FUNCTION_REGISTER	SFIOR


/*ADC FLAGS*/

#define ADC_CONVERISON_FLAG				0X04
#define ADC_START_CONVERSION			0X06


/*ADC MASKS*/

#define ADC_ENABLE						BIT_7
#define ADC_AUTO_TRIGGER				BIT_5
#define ADC_MUX_SELECT_CLEAR			0X1F
#define ADC_REFERENECE_VOLTAGE_CLEAR	0XC0
#define ADC_DATA_HIGH_CLEAR				0X03





/*USART REGISTERS*/

#define USART_DATA_REGISTER					UDR
#define USART_CONTROL_STATUS_A_REGISTER		UCSRA
#define USART_CONTROL_STATUS_B_REGISTER		UCSRB
#define USART_CONTROL_STATUS_C_REGISTER		UCSRC
#define USART_BAUD_RATE_REGISTER			UBRR
#define USART_BAUD_RATE_HIGH_REGISTER		UBRRH
#define USART_BAUD_RATE_LOW_REGISTER		UBRRL



/*USART FLAGS*/

#define USART_RECEIVE_COMPLETE_FLAG				BIT_7
#define USART_TRANSMIT_COMPLETE_FLAG			BIT_6
#define USART_DATA_REGISTER_EMPTY_FLAG			BIT_5


/*USART MASKS*/

#define USART_DISABLE_MASK					0XF8
#define USART_CONTROL_REG_A_CLEAR			0X20

/*USART BITS*/
#define USART_REGISTER_SELECT				BIT_7
#define USART_MODE_SELECT					BIT_6
#define USART_TRANSMITER_ENABLE				BIT_3
#define USART_RECEIVER_ENABLE				BIT_4



/*SPI REGISTERS*/

#define SPI_CONTROL_REGISTER			SPCR
#define SPI_STATUS_REGISTER			SPSR
#define SPI_DATA_REGISTER				SPDR

/*SPI FLAGS*/
#define SPI_INTERRUPT_FLAG				BIT_7
#define SPI_WRITE_COLLISION_FLAG		BIT_6

/*SPI BITS*/

#define SPI_INTERRUPT_ENABLE			BIT_7
#define SPI_ENABLE						BIT_6

/*SPI MASKS*/
#define CLEAR_TRANSMISSION_SPEED_MASK    (0x01)




/*TWI REGISTERS*/
#define TWI_CONTROL_REGISTER			TWCR
#define TWI_STATUS_REGISTER				TWSR
#define TWI_DATA_REGISTER				TWDR
#define TWI_ADDRESSE_REGISTER			TWAR
#define TWI_BIT_RATE_REGISTER			TWBR


/*TWI BITS*/
#define TWI_ENABLE						BIT_2
#define TWI_INTERRUPT_ENABLE			BIT_0
#define TWI_START						BIT_5
#define TWI_STOP						BIT_4
#define TWI_ACKNOWLEDGE_ENABLE			BIT_6
#define TWI_PRESCALAR_1					BIT_1
#define TWI_PRESCALAR_0					BIT_0


/*TWI FLAGS*/
#define TWI_INTERRUPT_FLAG				BIT_7
#define TWI_WRITE_COLLISION_FLAG		BIT_3


/*TWI MASKS*/
#define TWI_MASK_STATUS_BITS			0XF8


/** Enums which are related to the micro controller arch. **/

typedef enum port
{
	PORT_A,
	PORT_B,
	PORT_C,
	PORT_D

}GPIO_PORT;

typedef enum pin
{
	PIN_0,
	PIN_1,
	PIN_2,
	PIN_3,
	PIN_4,
	PIN_5,
	PIN_6,
	PIN_7

}GPIO_PIN;

typedef enum extinterrupt
{
	INTERRUPT_0,
	INTERRUPT_1,
	INTERRUPT_2

}GPIO_INTERRUPT_NUMBER;


typedef enum timers
{

	TIMER_0,
	TIMER_1,
	TIMER_2


}TIMER_NUMBER;


typedef enum timersChannel
{

	_CHANNEL_A,
	_CHANNEL_B,
	_IGNORE_CHANNEL /*in case we used timer0 or timer1 so we don't care about this option*/

}TIMER_CHANNEL;

typedef enum timerComparepins
{
	_OC0,
	_OC1A,
	_OC1B,
	_OC2
}TIMER_OUTPUT_COMPARE_PIN;




typedef enum adc_channels
{

	_ADC0,
	_ADC1,
	_ADC2,
	_ADC3,
	_ADC4,
	_ADC5,
	_ADC6,
	_ADC7

}ADC_CHANNEL;





#endif
